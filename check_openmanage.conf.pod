# Man page created with:
#
#  pod2man -s 5 -r "`./check_openmanage -V | head -n 1`" -c 'Nagios plugin' check_openmanage.conf.pod check_openmanage.conf.5
#
# $Id: check_openmanage.pod 20039 2011-04-26 09:56:56Z trondham $

=head1 NAME

F<check_openmanage.conf> - Configuration file for check_openmanage

=head1 FILE FORMAT

The file has an ini-style syntax and consists of sections and
parameters. A section begins with the name of the section in square
brackets and continues until the next section begins. An example of
section with two keywords and parameters:

=over 8

I<[section]>
    I<key1> = I<boolean>
    I<key2> = I<string>

=back

The data types used are string (no quotes needed) and bool (with
values of C<TRUE/FALSE>). For boolean values, C<1>, C<on> and C<true>
are equivalent, likewise for C<0>, C<off> and C<false>. They are also
case insensitive.

The root section or global section has no section name in brackets,
example:

        key1 = false
        key2 = foo
        
        [section]
            key1 = true
            key2 = bar

The values set in a bracket section will override those set in the
root section, in case of conflicts.

Lines starting with C<#> or C<;> are considered comments and ignored, as
are blank lines.

The configuration file must be a regular file. Owner and group does
not matter, but the Nagios user must have read access.

=head1 SECTIONS AND ORDERING

The section name should correspond to the hostname, i.e. the value
passed to the C<-H> or C<--hostname> parameter. The section name
itself can be either an exact match to the hostname, or a glob
pattern, as this example shows:

        key1 = true
        key2 = foo
    
        [192.168.1.2]
            key1 = true
    
        [192.168.*]
            key1 = false
            key2 = bar

The sections are read in order of significance. The root section is
read first. Then any sections with glob patterns that match the
hostname are read (alphabetically). Any section whose name is an exact
match to the hostname is read last.

For boolean values, any conflicts are resolved by letting the section
with the most significance (closest match to the hostname) override
any previous definitions. For string values, they are simply added
together.

In the example above, for the host C<192.168.1.2> the value of I<key1>
will be I<true> and I<key2> will be I<bar>. Any other host that
matches C<192.168.*> will have I<key1 = false> and I<key2 = bar>. All
other hosts will have I<key1 = true> and I<key2 = foo>.

Normal shell globbing may be used for the section names. This is
limited to C<*>, C<?> and C<[]>. Some examples:

        [192.168.*]
            # matches e.g. 192.168.10.20

        [192.168.10[34].1]
            # matches 192.168.103.1 and 192.168.104.1

        [login?.example.com]
            # mathces e.g. login1.example.com

CAUTION! Be careful not to have more than one glob pattern section
match any single host. This may lead to unpredictable results.

=head1 COMMAND LINE OPTIONS

Unless otherwise  noted, options given in the configuration file will
override any corresponding command line options.

In general, avoid using the same options on command line and in the
configuration file.

=head1 CONFIGURATION

=head2 GENERAL

=over 4

=item Check control

Any keyword to the C<--check> parameter are accepted in the
configuration file, as C<check_I<KEYWORD>>. These options take boolean
values (C<true> or C<false>). The following keywords are accepted for
check control, listed here with their default values:

        check_storage = true
        check_memory = true
        check_fans = true
        check_power = true
        check_temp = true
        check_cpu = true
        check_voltage = true
        check_batteries = true
        check_amperage = true
        check_intrusion = true
        check_sdcard = true
        check_esmhealth = true
        check_esmlog = false
        check_alertlog = false
        check_everything = false

If used together with the C<--check> command line option, the command
line option will override the configuration file, if there is a
conflict.

The option C<check_everything> is special and turns on all
checks. Setting this option to "true" will effectively negate any
other check options. This option corresponds to the C<-a> or C<--all>
command line option.

For more information about check control, see
L<check_openmanage(8)/CHECK CONTROL>.

=item Blacklisting

For blacklisting the keyword C<blacklist> is used, and the value is a
string that uses the same syntax as the C<-b> or C<--blacklist>
parameter. Example:

    blacklist = ctrl_fw=all/pdisk=0:0:1

If used together with the C<-b> or C<--blacklist> command line option,
the two blacklists from the config file and command line are merged
together.

For more information about blacklisting, including syntax, see
L<check_openmanage(8)/BLACKLISTING>.

=item Timeout

The plugin timeout can be configured with the C<timeout> keyword. The
argument is number of seconds and should be a positive
integer. Example:

    timeout = 60

The corresponding command line option is C<-t> or C<--timeout>.

=item Performance data

Performance data can be turned on in the configuration file with
C<performance_data>. Accepted values are boolean (TRUE/FALSE) or
either of the keywords "minimal" and "multiline". Example:

    performance_data = true

The corresponding command line option is C<-p> or C<--perfdata>.

=item Legacy Performance data

With version 3.7.0, performance data output changed. The new format is
not compatible with the old format. Users who wish to postpone
switching to the new performance data API may use this option. This
option takes a boolean value. Example:

    legacy_performance_data = true

The corresponding command line option is C<--legacy-perfdata>.

=item Temperature unit

The temperature unit used for reporting, performance data etc. can be
set with the C<temperature_unit> option. Allowed values are C<F> for
Fahrenheit, C<C> for Celsius, C<K> for Kelvin and C<R> for
Rankine. Example:

    temperature_unit = F

The corresponding command line option is C<--tempunit>. Note that the
command line option C<-F> or C<--fahrenheit> will override both the
command line option and the configuration file option.

=item Temperature limits

Custom temperature limits may be configured with the options
C<temp_threshold_warning> and C<temp_threshold_critical>. These
options corresponds to the command line options C<-w> or C<--warning>
and C<-c> or C<--critical>, respectively. They take the same arguments
as the command line options. Examples:

    temp_threshold_warning = 0=30/10
    temp_threshold_critical = 0=35/8

=back

=head2 SNMP OPTIONS

Several SNMP related options may be set in the configuration file. The
configuration file may contain the following SNMP options:

=over 4

=item SNMP community string

The SNMP community string can be set with C<snmp_community>. Example:

    snmp_community = mycommunity

Corresponding command line option: C<-C> or C<--community>

=item SNMP protocol version

The SNMP protocol version can be set with C<snmp_version>. Example:

    snmp_version = 2c

Corresponding command line option: C<-P> or C<--protocol>

=item SNMP port number

The remote port number used with SNMP can be set with
C<snmp_port>. Example:

    snmp_port = 161

Corresponding command line option: C<--port>

=item Use IPv6 instead of IPv4

The option C<snmp_use_ipv6> instructs the plugin to use IPv6 instead
of IPv4. This option takes a boolean value. Example:

    snmp_use_ipv6 = true

Corresponding command line option: C<-6> or C<--ipv6>

=item Use TCP instead of UDP

The option C<snmp_use_ipv6> instructs the plugin to use IPv6 instead
of IPv4. This option takes a boolean value. Example:

    snmp_use_tcp = true

Corresponding command line option: C<--tcp>

=back

=head2 OUTPUT CONTROL

These options gives some control over the output given by the plugin.

=over 4

=item Include servicetag in alerts

The option C<output_servicetag> will make the plugin include the
servers servicetag (serial number) in every alert. This option takes a
boolean value. Example:

    output_servicetag = true

Corresponding command line option: C<-i> or C<--info>

=item Include service state in alerts

The option C<output_servicestate> will make the plugin include the
service state in any alerts. This option takes a boolean
value. Example:

    output_servicestate = true

Corresponding command line option: C<-s> or C<--state>

=item Include abbreviated service state in alerts

The option C<output_servicestate_abbr> will make the plugin include
the abbreviated service state in any alerts. This option takes a
boolean value. Example:

    output_servicestate_abbr = true

Corresponding command line option: C<-S> or C<--short-state>

=item Show system info with alerts

The option C<output_sysinfo> will make the plugin output some system
information with alerts. This option takes a boolean value. Example:

    output_sysinfo = true

Corresponding command line option: C<-e> or C<--extinfo>

=item Show blacklistings in OK output

The option C<output_blacklist> will make the plugin show any
blacklistings in the OK output. This option takes a boolean
value. Example:

    output_blacklist = true

Corresponding command line option: C<-B> or C<--show-blacklist>

=item Verbosity of OK output

The option C<output_ok_verbosity> lets you adjust how much information
is shown in the OK output. This option takes a positive integer as
parameter. Example:

    output_ok_verbosity = 3

Corresponding command line option: C<-o> or C<--ok-info>

=item HTML output

The output C<output_html> makes the plugin produce HTML output. This
option takes either a boolean value, or a country or area
code. Example:

    output_html = de

Corresponding command line option: C<-I> or C<--htmlinfo>

=item Custom line after alerts

The option C<output_post_message> lets you specify one line of
information to be shown after any alerts. This option takes a string
as parameter. Examples:

    output_post_message = OS: %o %r
    output_post_message = NOTE: Handled in ticket 123456

For more information about codes and formatting, see the corresponding
command line option C<--postmsg> in L<check_openmanage(8)>.

=item Suppress or censor the servicetag

The option C<output_hide_servicetag> will censor the servicetag
(serial number) in any output from the plugin. This option takes a
boolean value. Example:

    output_hide_servicetag = true

Corresponding command line option: C<--hide-servicetag>

=back

=head1 SEE ALSO

L<check_openmanage(8)>
L<http://folk.uio.no/trondham/software/check_openmanage.html>

=cut
